//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Kart Scripts/Kart_Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Kart_Input : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Kart_Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Kart_Controls"",
    ""maps"": [
        {
            ""name"": ""Kart_Controls"",
            ""id"": ""6e593659-56f6-4e2b-8f74-5c4cc87cfb64"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""d4f34e06-dcda-4feb-b602-e9eb04b79399"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraControl"",
                    ""type"": ""Value"",
                    ""id"": ""05d641e9-14a5-449c-9440-f61d50d47825"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ActionButton"",
                    ""type"": ""Button"",
                    ""id"": ""78f62f59-4c6a-4522-a5e6-23862aff439d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ac7052fa-3b04-4217-a54a-6864a9ad5f40"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc73bebb-d684-4617-924c-1fb6d2ce7ac4"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f9d80a0-8682-4109-817c-7966b7ce728e"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActionButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Kart_Controls
        m_Kart_Controls = asset.FindActionMap("Kart_Controls", throwIfNotFound: true);
        m_Kart_Controls_Move = m_Kart_Controls.FindAction("Move", throwIfNotFound: true);
        m_Kart_Controls_CameraControl = m_Kart_Controls.FindAction("CameraControl", throwIfNotFound: true);
        m_Kart_Controls_ActionButton = m_Kart_Controls.FindAction("ActionButton", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Kart_Controls
    private readonly InputActionMap m_Kart_Controls;
    private IKart_ControlsActions m_Kart_ControlsActionsCallbackInterface;
    private readonly InputAction m_Kart_Controls_Move;
    private readonly InputAction m_Kart_Controls_CameraControl;
    private readonly InputAction m_Kart_Controls_ActionButton;
    public struct Kart_ControlsActions
    {
        private @Kart_Input m_Wrapper;
        public Kart_ControlsActions(@Kart_Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Kart_Controls_Move;
        public InputAction @CameraControl => m_Wrapper.m_Kart_Controls_CameraControl;
        public InputAction @ActionButton => m_Wrapper.m_Kart_Controls_ActionButton;
        public InputActionMap Get() { return m_Wrapper.m_Kart_Controls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Kart_ControlsActions set) { return set.Get(); }
        public void SetCallbacks(IKart_ControlsActions instance)
        {
            if (m_Wrapper.m_Kart_ControlsActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_Kart_ControlsActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_Kart_ControlsActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_Kart_ControlsActionsCallbackInterface.OnMove;
                @CameraControl.started -= m_Wrapper.m_Kart_ControlsActionsCallbackInterface.OnCameraControl;
                @CameraControl.performed -= m_Wrapper.m_Kart_ControlsActionsCallbackInterface.OnCameraControl;
                @CameraControl.canceled -= m_Wrapper.m_Kart_ControlsActionsCallbackInterface.OnCameraControl;
                @ActionButton.started -= m_Wrapper.m_Kart_ControlsActionsCallbackInterface.OnActionButton;
                @ActionButton.performed -= m_Wrapper.m_Kart_ControlsActionsCallbackInterface.OnActionButton;
                @ActionButton.canceled -= m_Wrapper.m_Kart_ControlsActionsCallbackInterface.OnActionButton;
            }
            m_Wrapper.m_Kart_ControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @CameraControl.started += instance.OnCameraControl;
                @CameraControl.performed += instance.OnCameraControl;
                @CameraControl.canceled += instance.OnCameraControl;
                @ActionButton.started += instance.OnActionButton;
                @ActionButton.performed += instance.OnActionButton;
                @ActionButton.canceled += instance.OnActionButton;
            }
        }
    }
    public Kart_ControlsActions @Kart_Controls => new Kart_ControlsActions(this);
    public interface IKart_ControlsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnCameraControl(InputAction.CallbackContext context);
        void OnActionButton(InputAction.CallbackContext context);
    }
}
